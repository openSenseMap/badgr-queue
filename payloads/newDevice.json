{
  "template": "newBox",
  "lang": "en_US",
  "recipient": { "address": "max@mustermann.de", "name": "Max Mustermann" },
  "payload": {
    "box": {
      "createdAt": "2023-03-17T12:27:05.939Z",
      "exposure": "outdoor",
      "model": "homeV2Wifi",
      "grouptag": [],
      "name": "CountYourBirds Test",
      "updatedAt": "2023-03-17T12:27:05.939Z",
      "currentLocation": {
        "timestamp": "2023-03-17T12:27:05.929Z",
        "coordinates": [7, 52],
        "type": "Point"
      },
      "sensors": [
        {
          "title": "PM1",
          "unit": "µg/m³",
          "sensorType": "SPS30",
          "icon": "osem-cloud",
          "_id": "64145c9965b19020ac8ea433"
        },
        {
          "title": "PM2.5",
          "unit": "µg/m³",
          "sensorType": "SPS30",
          "icon": "osem-cloud",
          "_id": "64145c9965b19020ac8ea432"
        },
        {
          "title": "PM4",
          "unit": "µg/m³",
          "sensorType": "SPS30",
          "icon": "osem-cloud",
          "_id": "64145c9965b19020ac8ea431"
        },
        {
          "title": "PM10",
          "unit": "µg/m³",
          "sensorType": "SPS30",
          "icon": "osem-cloud",
          "_id": "64145c9965b19020ac8ea430"
        }
      ],
      "_id": "64145c9965b19020ac8ea42f",
      "loc": [
        {
          "geometry": {
            "timestamp": "2023-03-17T12:27:05.929Z",
            "coordinates": [7, 52],
            "type": "Point"
          },
          "type": "Feature"
        }
      ]
    },
    "user": {
      "name": "Max Mustermann",
      "email": "max@mustermann.de",
      "role": "user",
      "language": "en_US",
      "boxes": ["64145c9965b19020ac8ea42f"],
      "emailIsConfirmed": false
    },
    "origin": ""
  },
  "attachment": {
    "filename": "senseBox.ino",
    "contents": ""
  }
}
